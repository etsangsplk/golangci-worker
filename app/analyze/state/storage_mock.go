// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/analyze/state/storage.go

package state

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return _m.recorder
}

// UpdateStatus mocks base method
func (_m *MockStorage) UpdateStatus(ctx context.Context, analysisID string, status string) error {
	ret := _m.ctrl.Call(_m, "UpdateStatus", ctx, analysisID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus
func (_mr *MockStorageMockRecorder) UpdateStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UpdateStatus", reflect.TypeOf((*MockStorage)(nil).UpdateStatus), arg0, arg1, arg2)
}

// GetStatus mocks base method
func (_m *MockStorage) GetStatus(ctx context.Context, analysisID string) (string, error) {
	ret := _m.ctrl.Call(_m, "GetStatus", ctx, analysisID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus
func (_mr *MockStorageMockRecorder) GetStatus(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetStatus", reflect.TypeOf((*MockStorage)(nil).GetStatus), arg0, arg1)
}
